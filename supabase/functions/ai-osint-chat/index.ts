
import "https://deno.land/x/xhr@0.1.0/mod.ts";
import { serve } from "https://deno.land/std@0.168.0/http/server.ts";

const openaiApiKey = Deno.env.get('OPENAI_API_KEY') || '';

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

const systemPrompt = `Voc√™ √© um assistente especializado em investiga√ß√£o digital (OSINT) focado na an√°lise de dados p√∫blicos.

SUAS FUN√á√ïES:
1. Analisar e interpretar dados fornecidos pelo usu√°rio
2. Sugerir hip√≥teses investigativas baseadas nos dados
3. Recomendar fontes de dados p√∫blicos relevantes
4. Orientar sobre t√©cnicas de OSINT

REGRAS ABSOLUTAS:
‚ùå NUNCA invente dados ou informa√ß√µes
‚ùå NUNCA crie informa√ß√µes falsas
‚ùå NUNCA forne√ßa dados que n√£o foram informados pelo usu√°rio
‚úîÔ∏è APENAS analise e interprete os dados fornecidos
‚úîÔ∏è Seja direto, objetivo e profissional
‚úîÔ∏è Informe sempre os limites da investiga√ß√£o digital

COMPORTAMENTO:
- Foque exclusivamente em investiga√ß√£o digital baseada em dados p√∫blicos
- Sugira fontes abertas como: Google, redes sociais p√∫blicas, registros p√∫blicos
- Oriente sobre t√©cnicas como: busca reversa de imagem, an√°lise de metadados, verifica√ß√£o cruzada
- Sempre mencione que as informa√ß√µes devem ser validadas
- Respeite quest√µes legais e √©ticas da investiga√ß√£o digital

Se n√£o tiver dados suficientes, pe√ßa mais informa√ß√µes ao usu√°rio.`;

serve(async (req) => {
  // Handle CORS preflight requests
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    console.log('=== IN√çCIO DA FUN√á√ÉO AI-OSINT-CHAT ===');
    
    // Verificar se a chave API est√° configurada
    if (!openaiApiKey || openaiApiKey === '') {
      console.error('‚ùå ERRO: OPENAI_API_KEY n√£o est√° configurada');
      return new Response(JSON.stringify({ 
        error: 'Chave da API OpenAI n√£o configurada. Verifique as configura√ß√µes no Supabase.' 
      }), {
        status: 500,
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      });
    }

    // Log da chave (apenas os primeiros e √∫ltimos caracteres por seguran√ßa)
    const keyPreview = openaiApiKey.length > 10 
      ? `${openaiApiKey.substring(0, 7)}...${openaiApiKey.substring(openaiApiKey.length - 4)}`
      : 'CHAVE_MUITO_CURTA';
    console.log(`‚úÖ Chave API encontrada: ${keyPreview}`);

    // Verificar se a chave est√° no formato correto
    if (!openaiApiKey.startsWith('sk-')) {
      console.error('‚ùå ERRO: Formato da chave API inv√°lido - deve come√ßar com "sk-"');
      return new Response(JSON.stringify({ 
        error: 'Formato da chave API OpenAI inv√°lido. A chave deve come√ßar com "sk-".' 
      }), {
        status: 400,
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      });
    }

    const reqBody = await req.json();
    const prompt = reqBody.prompt;
    
    if (!prompt) {
      console.error('‚ùå ERRO: Prompt vazio ou ausente');
      return new Response(JSON.stringify({ error: 'Prompt est√° vazio ou ausente' }), {
        status: 400,
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      });
    }

    console.log(`üìù Prompt recebido (${prompt.length} caracteres): ${prompt.substring(0, 100)}...`);

    const requestBody = {
      model: 'gpt-4o-mini',
      messages: [
        { role: 'system', content: systemPrompt },
        { role: 'user', content: prompt }
      ],
      temperature: 0.2,
      max_tokens: 1000,
    };

    console.log('üöÄ Enviando requisi√ß√£o para OpenAI API...');
    console.log(`üìä Modelo: ${requestBody.model}, Temperature: ${requestBody.temperature}, Max tokens: ${requestBody.max_tokens}`);

    const response = await fetch('https://api.openai.com/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${openaiApiKey}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(requestBody),
    });

    console.log(`üì° Resposta da OpenAI - Status: ${response.status} ${response.statusText}`);

    if (!response.ok) {
      const errorText = await response.text();
      console.error(`‚ùå ERRO DA OPENAI API (${response.status}):`, errorText);
      
      let errorMessage = 'Erro na comunica√ß√£o com a API da OpenAI';
      
      // Tratamento espec√≠fico para diferentes tipos de erro
      if (response.status === 401) {
        errorMessage = 'Chave da API OpenAI inv√°lida ou expirada. Verifique sua chave API.';
      } else if (response.status === 429) {
        errorMessage = 'Limite de requisi√ß√µes excedido ou cr√©ditos insuficientes na conta OpenAI.';
      } else if (response.status === 400) {
        errorMessage = 'Requisi√ß√£o inv√°lida enviada para a OpenAI. Verifique os par√¢metros.';
      } else if (response.status >= 500) {
        errorMessage = 'Erro interno do servidor da OpenAI. Tente novamente em alguns minutos.';
      }
      
      return new Response(JSON.stringify({ 
        error: errorMessage,
        details: `Status ${response.status}: ${errorText}`,
        troubleshooting: {
          status: response.status,
          possibleCauses: [
            response.status === 401 ? 'Chave API inv√°lida ou expirada' : null,
            response.status === 429 ? 'Limite de requisi√ß√µes ou cr√©ditos insuficientes' : null,
            response.status === 400 ? 'Par√¢metros da requisi√ß√£o inv√°lidos' : null,
            response.status >= 500 ? 'Erro do servidor OpenAI' : null
          ].filter(Boolean)
        }
      }), {
        status: response.status,
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      });
    }

    const data = await response.json();
    console.log('‚úÖ Resposta recebida da OpenAI com sucesso');
    console.log(`üìä Dados recebidos - Choices: ${data.choices?.length || 0}`);
    
    let generatedText = '';
    
    if (data.choices && data.choices[0] && data.choices[0].message) {
      generatedText = data.choices[0].message.content;
      console.log(`‚úÖ Texto gerado com sucesso (${generatedText.length} caracteres)`);
    } else {
      console.error('‚ùå ERRO: Formato de resposta inesperado da OpenAI:', JSON.stringify(data, null, 2));
      throw new Error('Resposta inesperada da API da OpenAI - formato inv√°lido');
    }

    console.log('=== FUN√á√ÉO CONCLU√çDA COM SUCESSO ===');

    return new Response(JSON.stringify({ generatedText }), {
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    });
  } catch (error) {
    console.error('üí• ERRO CR√çTICO na fun√ß√£o AI OSINT chat:', error);
    console.error('Stack trace:', error.stack);
    
    return new Response(JSON.stringify({ 
      error: 'Erro interno do servidor. Verifique os logs para mais detalhes.',
      details: error.message,
      timestamp: new Date().toISOString()
    }), {
      status: 500,
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    });
  }
});
